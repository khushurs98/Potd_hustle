'''
Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
'''


#Solution Code 


#Back-end complete function Template for Python 3


class Solution:

    INT_MAX = 4294967296
    INT_MIN = -4294967296

    #Function to check whether a Binary Tree is BST or not.
    def isBST(self, node):
        return (self.isBSTUtil(node, self.INT_MIN, self.INT_MAX))

    def isBSTUtil(self, node, mini, maxi):

        #an empty tree is BST so we return true.
        if node is None:
            return True

        #returning false if this node violates the min/max constraint.
        if node.data < mini or node.data > maxi:
            return False

        #otherwise checking the subtrees recursively.
        #tightening the min or max constraint.
        return (self.isBSTUtil(node.left, mini, node.data - 1)
                and self.isBSTUtil(node.right, node.data + 1, maxi))
