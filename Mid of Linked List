'''
Given the head of a linked list, the task is to find the middle. For example, the middle of 1-> 2->3->4->5 is 3. If there are two middle nodes (even count), return the second middle. For example, middle of 1->2->3->4->5->6 is 4.
'''

#Solution Code

class node:
    def __init__(data):
        self.data = data
        self.next = None
'''
class Solution:
    def findMid(self, head):
        if head is None:
            return -1
        
        slow = head
        fast = head

        while fast is not None and fast.next is not None:
            slow = slow.next
            fast = fast.next.next

        return slow.data  

