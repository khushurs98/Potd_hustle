'''
You are given a weighted undirected graph having n vertices numbered from 1 to n and m edges along with their weights. Find the shortest path between the vertex 1 and the vertex n,  if there exists a path, and return a list of integers whose first element is the weight of the path, and the rest consist of the nodes on that path. If no path exists, then return a list containing a single element -1.

The input list of edges is as follows - {a, b, w}, denoting there is an edge between a and b, and w is the weight of that edge.
'''


#Solution Code


from collections import deque

class Solution:
    def shortestPath(self, n: int, m: int, edges: List[List[int]]) -> List[int]:
        # CodeGenius
        parent = list(range(n))
        dist = [float('inf')] * n
        adj = [[] for _ in range(n)]
        for u, v, wt in edges:
            adj[u-1].append((v-1, wt))
            adj[v-1].append((u-1, wt))
        
        q = deque([(0, 0)])
        dist[0] = 0
        while q:
            node_wt, node = q.popleft()
            for adjnode, wt in adj[node]:
                if dist[adjnode] > wt + node_wt:
                    dist[adjnode] = wt + node_wt
                    parent[adjnode] = node
                    q.append((dist[adjnode], adjnode))
        
        if dist[n-1] == float('inf'):
            return [-1]
        
        path = []
        r = n-1
        while r != 0 and r != parent[r]:
            path.append(r+1)
            r = parent[r]
        path.append(1)
        path.reverse()
        
        return [dist[n-1]] + path

