'''
You are given a square binary grid. A grid is considered binary if every value in the grid is either 1 or 0. You can change at most one cell in the grid from 0 to 1. You need to find the largest group of connected  1's. Two cells are said to be connected if both are adjacent(top, bottom, left, right) to each other and both have the same value.
'''


#Solution Code


from typing import List, Set
from collections import defaultdict

class Solution:
    def dfs(self, grid: List[List[int]], i: int, j: int, index: int) -> int:
        # base case
        n = len(grid)
        if i < 0 or i >= n or j < 0 or j >= n or grid[i][j] != 1:
            return 0

        # recursive
        grid[i][j] = index
        count = (self.dfs(grid, i+1, j, index) +
                 self.dfs(grid, i-1, j, index) +
                 self.dfs(grid, i, j-1, index) +
                 self.dfs(grid, i, j+1, index))
        return count + 1

    def neighbours(self, grid: List[List[int]], i: int, j: int) -> Set[int]:
        n = len(grid)
        s = set()
        if i > 0 and grid[i-1][j] != 0:
            s.add(grid[i-1][j])
        if j > 0 and grid[i][j-1] != 0:
            s.add(grid[i][j-1])
        if i < n-1 and grid[i+1][j] != 0:
            s.add(grid[i+1][j])
        if j < n-1 and grid[i][j+1] != 0:
            s.add(grid[i][j+1])
        return s

    def MaxConnection(self, grid: List[List[int]]) -> int:
        n = len(grid)
        res = 0
        index = 2
        mp = defaultdict(int)

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    mp[index] = self.dfs(grid, i, j, index)
                    res = max(res, mp[index])
                    index += 1

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    s = self.neighbours(grid, i, j)
                    count = 1
                    for idx in s:
                        count += mp[idx]
                    res = max(res, count)

        return res
'''
# Example usage:
grid = [
    [1, 1, 0],
    [0, 1, 0],
    [1, 0, 1]
]
'''
sol = Solution()




